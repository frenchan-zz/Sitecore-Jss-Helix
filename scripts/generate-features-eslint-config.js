const fs = require("fs");
const path = require("path");
const chokidar = require("chokidar");

/*
  FEATURE MODULES ESLINT CONRIGURATION FILE GENERATION
  Generates the /src/Feature/.eslintrc.json file which disallow features to import each other.
  NOTE: this script can run in two modes. The default mode, the .eslintrc.json file is written once.
  But if `--watch` is a process argument, the Feature source folder will be watched,
  and the .eslintrc.json rewritten on added or deleted folders.
  This is used during `jss start` to pick up new or removed components at runtime.
*/

/* eslint-disable no-console */

const eslintConfigurationPath = path.resolve("src/Feature/.eslintrc.json");
const featureRootPath = "src/Feature";

const isWatch = process.argv.some(arg => arg === "--watch");

if (isWatch) {
  watchEslintConfiguration();
} else {
  writeEslintConfiguration();
}

function watchEslintConfiguration() {
  console.log(
    `Watching for changes to feature modules in ${featureRootPath}...`
  );

  chokidar
    .watch(featureRootPath, { ignoreInitial: true, awaitWriteFinish: true })
    .on("addDir", writeEslintConfiguration)
    .on("unlinkDir", writeEslintConfiguration)
    .on("error", writeEslintConfiguration);
}

function writeEslintConfiguration() {
  const eslintConfiguration = generateEslintConfiguration();

  console.log(`Writing ESLint configuration to ${eslintConfigurationPath}`);

  fs.writeFileSync(eslintConfigurationPath, eslintConfiguration, {
    encoding: "utf8"
  });
}

function generateEslintConfiguration() {
  // by convention, we expect to find feature modules under /src/Feature/Feature-Name
  // If you'd like to use your own convention, encode it below.
  // NOTE: generating the ESLint configuration is also totally optional,
  // and it can be maintained manually if preferred.

  let zones = [];
  const featureFolders = [];

  fs.readdirSync(featureRootPath).forEach(featureFolder => {
    if (fs.lstatSync(path.join(featureRootPath, featureFolder)).isDirectory()) {
      featureFolders.push(featureFolder);
    }
  });

  featureFolders.forEach(sourceFeatureFolder => {
    featureFolders.forEach(otherFeatureFolder => {
      if (sourceFeatureFolder == otherFeatureFolder) {
        return;
      }

      zones.push(
        `          {
            "target": "./src/Feature/${sourceFeatureFolder}",
            "from": "./src/Feature/${otherFeatureFolder}"
          }`
      );
    });
  });

  return `// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-features-eslint-config.js to modify the generation of this file.
{
  "rules": {
    "import/no-restricted-paths": [
      "error",
      {
        "zones": [
          {
            "target": "./src/Feature",
            "from": "./src/Project"
          },
${zones.join(",\n")}
        ]
      }
    ]
  }
}
`;
}